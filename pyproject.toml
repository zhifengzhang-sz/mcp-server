[project]
name = "mcp-server-foundation"
version = "1.0.0"
description = "Plugin-ready MCP server foundation with functional design patterns"
authors = [{name = "Zhifeng Zhang", email = "your-email@example.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    # Phase 1 Core Dependencies (Immutable - never changes)
    # MCP Protocol
    "mcp>=1.9.4",                    # Official MCP SDK
    
    # Web Framework
    "fastapi>=0.115.13",             # High-performance async web
    "uvicorn>=0.30.0",               # ASGI server
    
    # LLM Integration
    "ollama-python>=0.2.1",          # Ollama client library
    
    # Data Storage
    "redis>=5.0.1",                  # Session and cache storage
    "aiosqlite>=0.19.0",             # Lightweight persistence
    
    # Infrastructure
    "structlog>=23.2.0",             # Structured logging
    "pydantic>=2.5.0",               # Data validation
    "httpx>=0.28.1",                 # Async HTTP client
    "python-dotenv>=1.0.0",          # Configuration
    "typer>=0.12.0",                 # Modern CLI framework
    "jinja2>=3.1.2",                 # Template processing
    
    # Functional Programming Support
    "toolz>=0.12.0",                 # Functional utilities
    "immutables>=0.19",              # Immutable data structures
    "returns>=0.22.0",               # Functional error handling
    
    # Plugin Framework
    "pluggy>=1.3.0",                 # Plugin management
    "entrypoints>=0.4",              # Plugin discovery
    "importlib-metadata>=6.0.0",     # Dynamic imports
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.6",
    "mypy>=1.10.0",
    "types-requests>=2.31.0",
    "types-redis>=4.6.0",
    "black>=23.0.0",
]

# Phase 2 Plugin Extensions (Pure Add-Ons)
phase2-rag = [
    # RAG Framework
    "llamaindex>=0.9.0",             # Document processing
    "chromadb>=0.4.18",              # Vector database
    "sentence-transformers>=2.2.2",  # Embeddings
    
    # Enhanced Processing
    "aiofiles>=23.2.1",             # Async file operations
    "pydantic-settings>=2.1.0",     # Advanced configuration
    "tiktoken>=0.5.1",              # Token counting
    
    # Optional Performance Enhancements
    "faiss-cpu>=1.7.4",             # Alternative vector search
    "redis-om>=0.1.2",              # Enhanced Redis integration
]

# Phase 3 Plugin Extensions (Pure Add-Ons)
phase3-agents = [
    # Multi-Agent Framework
    "multi-agent-framework>=1.0.0",  # Agent coordination
    "workflow-engine>=1.0.0",        # Workflow orchestration
    "agent-communication>=1.0.0",    # Inter-agent messaging
    "task-scheduler>=1.0.0",         # Task distribution
    "agent-directory>=1.0.0",        # Agent registry
    
    # Specialized Agent Dependencies
    "code-intelligence>=1.0.0",      # Code analysis and generation
    "documentation-engine>=1.0.0",   # Documentation processing
    "test-automation>=1.0.0",        # Test generation and execution
    "quality-analyzer>=1.0.0",       # Code quality assessment
    
    # Optional Integration Dependencies
    "rag-agent-bridge>=1.0.0",       # Phase 2 RAG integration (optional)
    "context-agent-adapter>=1.0.0",  # Enhanced context integration
]

# Phase 4 Plugin Extensions (Pure Add-Ons)
phase4-autonomy = [
    # Autonomous Plugin Dependencies
    "self-improvement>=1.0.0",       # Performance analysis and optimization
    "dynamic-creation>=1.0.0",       # Agent generation and deployment
    "autonomous-goals>=1.0.0",       # Goal setting and planning
    "adaptive-learning>=1.0.0",      # Learning and adaptation
    "code-generation>=1.0.0",        # Dynamic code creation
    
    # AI/ML Dependencies
    "reinforcement-learning>=1.0.0", # Learning algorithms
    "pattern-analysis>=1.0.0",       # Pattern recognition
    "optimization-engine>=1.0.0",    # Performance optimization
    "decision-making>=1.0.0",        # Autonomous decision making
    
    # Optional Integration Dependencies
    "foundation-autonomy-bridge>=1.0.0", # Phase 1+2+3 integration (optional)
    "context-autonomy-adapter>=1.0.0",   # Enhanced autonomous context
]

# Performance monitoring and debugging
monitoring = [
    "prometheus-client>=0.17.0",     # Metrics collection
    "jaeger-client>=4.8.0",          # Distributed tracing
    "psutil>=5.9.0",                 # System monitoring
]

# Production deployment
production = [
    "gunicorn>=21.2.0",              # Production WSGI server
    "docker>=6.1.0",                 # Container management
    "kubernetes>=27.2.0",            # Orchestration
]

# All Phase 2 capabilities (convenience)
all-phase2 = [
    "mcp-server-foundation[phase2-rag,monitoring]"
]

# All Phase 3 capabilities (convenience) 
all-phase3 = [
    "mcp-server-foundation[phase2-rag,phase3-agents,monitoring]"
]

# All Phase 4 capabilities (convenience)
all-phase4 = [
    "mcp-server-foundation[phase2-rag,phase3-agents,phase4-autonomy,monitoring]"
]

# Complete development setup
all-dev = [
    "mcp-server-foundation[dev,phase2-rag,monitoring]"
]

# Complete system (all phases)
complete = [
    "mcp-server-foundation[phase2-rag,phase3-agents,phase4-autonomy,monitoring,production]"
]

[project.entry-points.mcp_plugins]
# Phase 1 Core Plugins (Built-in)
core_tools = "mcp_server.plugins.core_tools:CoreToolsPlugin"
session_manager = "mcp_server.plugins.session:SessionManagerPlugin" 
context_assembly = "mcp_server.plugins.context:ContextAssemblyPlugin"

# Phase 2 RAG Plugins (Optional - only if phase2-rag installed)
rag_context = "mcp_server.plugins.rag.context:RAGContextAdapterPlugin [phase2-rag]"
semantic_tools = "mcp_server.plugins.rag.tools:SemanticToolsPlugin [phase2-rag]"
knowledge_base = "mcp_server.plugins.rag.knowledge:KnowledgeBasePlugin [phase2-rag]"
ide_enhancement = "mcp_server.plugins.rag.ide:IDEEnhancementPlugin [phase2-rag]"

# Phase 3 Agent Plugins (Optional - only if phase3-agents installed)
agent_coordinator = "mcp_server.plugins.agents.coordinator:AgentCoordinatorPlugin [phase3-agents]"
code_agent = "mcp_server.plugins.agents.code:CodeAgentPlugin [phase3-agents]"
doc_agent = "mcp_server.plugins.agents.doc:DocAgentPlugin [phase3-agents]"
test_agent = "mcp_server.plugins.agents.test:TestAgentPlugin [phase3-agents]"
workflow_orchestrator = "mcp_server.plugins.agents.workflow:WorkflowOrchestratorPlugin [phase3-agents]"
agent_communication = "mcp_server.plugins.agents.communication:AgentCommunicationPlugin [phase3-agents]"

# Phase 4 Autonomy Plugins (Optional - only if phase4-autonomy installed)
self_improvement = "mcp_server.plugins.autonomy.improvement:SelfImprovementPlugin [phase4-autonomy]"
dynamic_agent_creator = "mcp_server.plugins.autonomy.creation:DynamicAgentCreatorPlugin [phase4-autonomy]"
autonomous_goals = "mcp_server.plugins.autonomy.goals:AutonomousGoalSetterPlugin [phase4-autonomy]"
adaptive_learning = "mcp_server.plugins.autonomy.learning:AdaptiveLearningPlugin [phase4-autonomy]"

[project.scripts]
mcp-server = "mcp_server.cli:main"
mcp-server-dev = "mcp_server.cli:dev_main"

[tool.setuptools.packages.find]
where = ["."]
include = ["mcp_server*"]

[tool.coverage.run]
branch = true
source = ["mcp_server"]
omit = [
    "mcp_server/plugins/rag/*",      # Phase 2 plugins tested separately
    "mcp_server/plugins/agents/*",   # Phase 3 plugins tested separately  
    "mcp_server/plugins/autonomy/*", # Phase 4 plugins tested separately
]

[tool.coverage.report]
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover',
    'raise NotImplementedError',
    'if __name__ == .__main__.:',
]
show_missing = true
fail_under = 95

[tool.pytest.ini_options]
addopts = "--cov --cov-fail-under=95 --cov-report html:./coverage/html --cov-report xml:./coverage/coverage.xml --junitxml=./reports/unittests/junit.xml --html=./reports/unittests/html/index.html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Markers for different phases
markers = [
    "phase1: Phase 1 core functionality tests",
    "phase2: Phase 2 RAG plugin tests (require phase2-rag extras)",
    "phase3: Phase 3 agent tests (require phase3-agents extras)",
    "phase4: Phase 4 autonomy tests (require phase4-autonomy extras)",
    "integration: Integration tests across phases",
    "performance: Performance and load tests",
]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TC",  # flake8-type-checking
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Too complex (we'll handle complexity case by case)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "FBT", "PLR2004", "S101"]
"mcp_server/plugins/rag/*" = ["TC001"]  # Phase 2 plugins have different import patterns

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Per-module type checking options
[[tool.mypy.overrides]]
module = [
    "toolz.*",
    "immutables.*", 
    "returns.*",
    "pluggy.*",
    "ollama.*",
    "redis.*",
    "structlog.*",
]
ignore_missing_imports = true

# Phase 2 plugins (optional typing)
[[tool.mypy.overrides]]
module = "mcp_server.plugins.rag.*"
ignore_missing_imports = true
check_untyped_defs = false

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["mcp_server"]
