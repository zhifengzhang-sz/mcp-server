name: "Objective-Architecture Consistency Verification"
version: "1.0.0"
description: "Comprehensive verification of consistency between docs/objective/ and docs/architecture/ layers"
domain: "documentation_verification"
category: "cross_layer_consistency"

# ============================================================================
# CORE VERIFICATION OBJECTIVE
# ============================================================================

objective: |
  Verify complete consistency between objective specifications (docs/objective/) 
  and architectural specifications (docs/architecture/) to ensure:
  
  1. **Strategic Alignment**: Architecture implements all objective requirements
  2. **Phase Coherence**: Architectural phases align with objective phases  
  3. **Capability Mapping**: All objective capabilities have architectural support
  4. **Extension Consistency**: Future phase extensions properly planned
  5. **Integration Coherence**: Architecture supports objective integration patterns

# ============================================================================
# VERIFICATION SCOPE AND BOUNDARIES  
# ============================================================================

scope:
  include:
    - "docs/objective/phase.1.md"
    - "docs/objective/phase.2.md" 
    - "docs/objective/phase.3.md"
    - "docs/objective/phase.4.md"
    - "docs/objective/README.md"
    - "docs/architecture/sagent-architecture.md"
    - "docs/architecture/mcp-integration-strategy.md"
    - "docs/architecture/strategic-roadmap.md"
    - "docs/architecture/development-environment.md"
  
  exclude:
    - Implementation files (docs/impl/)
    - Design specifications (docs/design/)
    - Research documents (docs/research/)
    - Temporary files and drafts

# ============================================================================
# CONSISTENCY VERIFICATION MATRIX
# ============================================================================

verification_matrix:
  
  # Phase 1: Plugin-Ready Foundation
  phase_1_consistency:
    objective_requirements:
      - "Plugin system foundation"
      - "Functional programming patterns"
      - "MCP protocol integration"
      - "Tool registry and execution"
      - "Session management"
      - "Context assembly"
      - "Event sourcing"
    
    architecture_implementation:
      - "Plugin architecture with registry and composition"
      - "Functional patterns with immutable data structures"
      - "MCP request/response handling"
      - "Tool adapter pattern with security/performance layers"
      - "Event-sourced session management"
      - "Context assembly with plugin enhancement"
      - "Event-driven architecture"
    
    consistency_checks:
      - "Plugin system requirements → Plugin architecture mapping"
      - "Functional patterns → Immutability and pure functions"
      - "MCP integration → Protocol handling architecture"
      - "Tool requirements → Tool registry architecture"
      - "Session requirements → Event sourcing architecture"
  
  # Phase 2: RAG Integration
  phase_2_consistency:
    objective_requirements:
      - "RAG system integration"
      - "Knowledge base management"
      - "Context enhancement"
      - "Information retrieval"
    
    architecture_implementation:
      - "RAG plugin architecture"
      - "Vector store integration patterns"
      - "Context enhancement pipelines"
      - "Retrieval adapter patterns"
    
    consistency_checks:
      - "RAG requirements → Plugin extension architecture"
      - "Knowledge base → Storage architecture patterns"
      - "Context enhancement → Plugin composition patterns"
  
  # Phase 3: sAgent Coordination
  phase_3_consistency:
    objective_requirements:
      - "Multi-agent coordination"
      - "Agent communication protocols"
      - "Task delegation and orchestration"
      - "Agent discovery and registration"
    
    architecture_implementation:
      - "sAgent coordination architecture"
      - "Inter-agent communication patterns"
      - "Orchestration and workflow management"
      - "Agent registry and discovery"
    
    consistency_checks:
      - "Multi-agent → sAgent architecture alignment"
      - "Communication protocols → Integration patterns"
      - "Task delegation → Orchestration architecture"
  
  # Phase 4: Autonomous Capabilities
  phase_4_consistency:
    objective_requirements:
      - "Autonomous decision making"
      - "Learning and adaptation"
      - "Goal-oriented behavior"
      - "Self-monitoring and adjustment"
    
    architecture_implementation:
      - "Autonomous agent architecture"
      - "Learning and adaptation frameworks"
      - "Goal processing and planning"
      - "Self-monitoring and feedback loops"
    
    consistency_checks:
      - "Autonomy requirements → Decision architecture"
      - "Learning → Adaptation architecture patterns"
      - "Goal-oriented → Planning architecture"

# ============================================================================
# VERIFICATION INSTRUCTIONS
# ============================================================================

instructions:
  
  # Step 1: Document Analysis
  document_analysis:
    objective_analysis:
      - "Extract all capability requirements from each phase"
      - "Identify integration points between phases"
      - "Map dependencies and prerequisites"
      - "Document extension points for future phases"
    
    architecture_analysis:
      - "Extract all architectural components and patterns"
      - "Identify architectural support for each capability"
      - "Map architectural dependencies and flows"
      - "Document extension mechanisms and plugin points"
  
  # Step 2: Consistency Mapping
  consistency_mapping:
    requirement_to_architecture:
      - "Map each objective requirement to architectural component"
      - "Verify architectural support exists for all requirements"
      - "Check that architecture provides necessary capabilities"
      - "Validate extension points support future requirements"
    
    architecture_to_requirement:
      - "Map each architectural component to objective requirement"
      - "Verify no architectural components lack justification"
      - "Check architectural complexity matches requirement complexity"
      - "Validate architectural patterns align with objectives"
  
  # Step 3: Gap Analysis
  gap_analysis:
    missing_architecture:
      - "Identify objective requirements without architectural support"
      - "Document architectural gaps that need addressing"
      - "Prioritize gaps by phase and criticality"
      - "Recommend architectural additions or modifications"
    
    excess_architecture:
      - "Identify architectural components without objective justification"
      - "Evaluate whether excess components provide value"
      - "Recommend retention, modification, or removal"
      - "Document rationale for architectural decisions"
  
  # Step 4: Integration Verification
  integration_verification:
    phase_transitions:
      - "Verify smooth transitions between phases"
      - "Check architectural support for phase evolution"
      - "Validate extension mechanisms work across phases"
      - "Ensure backward compatibility is maintained"
    
    cross_phase_dependencies:
      - "Map dependencies between phases"
      - "Verify architectural support for dependencies"
      - "Check for circular dependencies or conflicts"
      - "Validate dependency resolution mechanisms"

# ============================================================================
# VERIFICATION CRITERIA
# ============================================================================

verification_criteria:
  
  # Critical Success Factors
  critical_success:
    - "100% of Phase 1 requirements have architectural support"
    - "All architectural components have objective justification"
    - "Extension points support all planned future phases"
    - "No architectural conflicts or circular dependencies"
    - "Integration patterns support objective requirements"
  
  # Quality Gates
  quality_gates:
    completeness:
      - "All objective capabilities architecturally supported"
      - "All architectural components requirement-justified"
      - "All phase transitions architecturally planned"
    
    consistency:
      - "Architectural patterns align with objective patterns"
      - "Complexity levels match between objectives and architecture"
      - "Extension mechanisms support objective evolution"
    
    integration:
      - "MCP integration architecturally complete"
      - "Plugin system supports all objective requirements"
      - "Cross-phase dependencies properly architected"

# ============================================================================
# VERIFICATION OUTPUTS
# ============================================================================

expected_outputs:
  
  # Consistency Report
  consistency_report:
    format: "markdown"
    sections:
      - "Executive Summary"
      - "Phase-by-Phase Consistency Analysis"
      - "Requirement-to-Architecture Mapping"
      - "Gap Analysis and Recommendations"
      - "Integration Verification Results"
      - "Quality Gate Assessment"
  
  # Verification Matrix
  verification_matrix_output:
    format: "table"
    content:
      - "Requirement | Architecture | Status | Notes"
      - "Phase mapping with consistency indicators"
      - "Gap identification with priority levels"
      - "Integration point verification results"
  
  # Action Items
  action_items:
    format: "checklist"
    categories:
      - "Critical gaps requiring immediate attention"
      - "Architectural improvements for better alignment"
      - "Documentation updates needed"
      - "Future phase preparation tasks"

# ============================================================================
# VERIFICATION AUTOMATION
# ============================================================================

automation_support:
  
  # Automated Checks
  automated_checks:
    - "Cross-reference extraction and validation"
    - "Keyword consistency checking"
    - "Phase dependency validation"
    - "Integration point verification"
  
  # Manual Verification Points
  manual_verification:
    - "Architectural pattern alignment assessment"
    - "Complexity level matching evaluation"
    - "Extension mechanism adequacy review"
    - "Integration strategy coherence analysis"
  
  # Continuous Verification
  continuous_verification:
    - "Pre-commit consistency checks"
    - "Documentation update impact analysis"
    - "Phase evolution compatibility verification"
    - "Integration pattern validation"

# ============================================================================
# SUCCESS METRICS
# ============================================================================

success_metrics:
  quantitative:
    - "Consistency score: >95% requirement-architecture mapping"
    - "Gap count: <5 critical gaps identified"
    - "Integration coverage: 100% of integration points verified"
    - "Phase alignment: 100% of phases architecturally supported"
  
  qualitative:
    - "Architectural coherence with objective vision"
    - "Extension mechanism adequacy for future phases"
    - "Integration pattern elegance and maintainability"
    - "Overall documentation consistency and clarity"

# ============================================================================
# VERIFICATION SCHEDULE
# ============================================================================

verification_schedule:
  frequency: "weekly"
  triggers:
    - "Any objective document modification"
    - "Any architecture document modification"
    - "Phase milestone completion"
    - "Integration pattern changes"
  
  deliverables:
    - "Weekly consistency report"
    - "Monthly comprehensive verification"
    - "Phase transition verification"
    - "Annual architectural alignment review" 