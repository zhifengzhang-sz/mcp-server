name: "Architecture-Design Consistency Verification"
version: "1.0.0"
description: "Comprehensive verification of consistency between docs/architecture/ and docs/design/ layers"
domain: "documentation_verification"
category: "cross_layer_consistency"

# ============================================================================
# CORE VERIFICATION OBJECTIVE
# ============================================================================

objective: |
  Verify complete consistency between architectural specifications (docs/architecture/) 
  and design specifications (docs/design/) to ensure:
  
  1. **Architectural Implementation**: Design implements all architectural patterns
  2. **Pattern Consistency**: Design patterns align with architectural patterns
  3. **Component Mapping**: All architectural components have design specifications
  4. **Interface Alignment**: Design interfaces match architectural interfaces
  5. **Language Agnostic**: Design maintains architectural language-agnostic approach

# ============================================================================
# VERIFICATION SCOPE AND BOUNDARIES  
# ============================================================================

scope:
  include:
    - "docs/architecture/sagent-architecture.md"
    - "docs/architecture/mcp-integration-strategy.md"
    - "docs/architecture/strategic-roadmap.md"
    - "docs/architecture/development-environment.md"
    - "docs/design/component.phase.1.md"
    - "docs/design/classes.phase.1.md"
    - "docs/design/container.phase.1.md"
    - "docs/design/context.phase.1.md"
    - "docs/design/flow.phase.1.md"
    - "docs/design/phase.1.md"
  
  exclude:
    - Implementation files (docs/impl/)
    - Objective specifications (docs/objective/)
    - Research documents (docs/research/)
    - Temporary files and drafts

# ============================================================================
# CONSISTENCY VERIFICATION MATRIX
# ============================================================================

verification_matrix:
  
  # Plugin Architecture → Design Mapping
  plugin_architecture_consistency:
    architecture_specifications:
      - "Plugin registry with discovery and composition"
      - "Plugin adapter pattern for context and tools"
      - "Plugin lifecycle management"
      - "Plugin extension points for future phases"
      - "Plugin security and validation"
    
    design_specifications:
      - "PluginRegistry with register/discover operations"
      - "ContextAdapter and ToolAdapter interfaces"
      - "Plugin interface with lifecycle methods"
      - "Extension point definitions in all components"
      - "ValidationResult and security patterns"
    
    consistency_checks:
      - "Plugin registry architecture → PluginRegistry design"
      - "Adapter patterns → ContextAdapter/ToolAdapter interfaces"
      - "Lifecycle management → Plugin interface methods"
      - "Extension points → Plugin extension mechanisms"
      - "Security patterns → Validation and error handling"
  
  # Context Architecture → Design Mapping
  context_architecture_consistency:
    architecture_specifications:
      - "Context assembly with plugin enhancement"
      - "Immutable context data structures"
      - "Context adapter pattern for extensibility"
      - "Context composition and transformation"
      - "Context caching and performance"
    
    design_specifications:
      - "Context assembly operations with adapters"
      - "Immutable Context data structure"
      - "ContextAdapter interface for enhancement"
      - "Context transformation functions"
      - "Context caching strategies"
    
    consistency_checks:
      - "Context assembly → assemble() operation design"
      - "Immutability → Context data structure design"
      - "Adapter pattern → ContextAdapter interface"
      - "Composition → Context transformation operations"
      - "Performance → Caching and optimization patterns"
  
  # Tool Architecture → Design Mapping
  tool_architecture_consistency:
    architecture_specifications:
      - "Tool registry with adapter enhancement"
      - "Tool execution with security layers"
      - "Tool composition and chaining"
      - "Tool performance monitoring"
      - "Tool extension mechanisms"
    
    design_specifications:
      - "ToolRegistry with register/execute operations"
      - "Tool execution with SecurityToolAdapter"
      - "Tool composition patterns"
      - "PerformanceToolAdapter for monitoring"
      - "Tool extension points"
    
    consistency_checks:
      - "Tool registry → ToolRegistry design"
      - "Security layers → SecurityToolAdapter"
      - "Composition → Tool chaining operations"
      - "Performance → PerformanceToolAdapter"
      - "Extensions → Tool extension mechanisms"
  
  # Session Architecture → Design Mapping
  session_architecture_consistency:
    architecture_specifications:
      - "Event-sourced session management"
      - "Session state immutability"
      - "Event handling and dispatch"
      - "Session persistence patterns"
      - "Session recovery mechanisms"
    
    design_specifications:
      - "EventSourcedSession with event handling"
      - "Immutable SessionState data structure"
      - "EventHandler interface and dispatch"
      - "Session storage and persistence"
      - "Session recovery operations"
    
    consistency_checks:
      - "Event sourcing → EventSourcedSession design"
      - "Immutability → SessionState structure"
      - "Event handling → EventHandler interface"
      - "Persistence → Storage integration"
      - "Recovery → Session restoration operations"
  
  # MCP Integration Architecture → Design Mapping
  mcp_integration_consistency:
    architecture_specifications:
      - "MCP protocol request/response handling"
      - "MCP message routing and dispatch"
      - "MCP error handling and validation"
      - "MCP extension mechanisms"
      - "MCP performance optimization"
    
    design_specifications:
      - "MCPRequest/MCPResponse data structures"
      - "Message routing through plugin system"
      - "Error handling with ValidationResult"
      - "MCP extension through plugins"
      - "Performance optimization patterns"
    
    consistency_checks:
      - "Protocol handling → MCPRequest/MCPResponse"
      - "Message routing → Plugin dispatch patterns"
      - "Error handling → ValidationResult design"
      - "Extensions → Plugin integration points"
      - "Performance → Optimization strategies"

# ============================================================================
# VERIFICATION INSTRUCTIONS
# ============================================================================

instructions:
  
  # Step 1: Architecture Analysis
  architecture_analysis:
    pattern_extraction:
      - "Extract all architectural patterns and principles"
      - "Identify architectural components and their relationships"
      - "Map architectural interfaces and contracts"
      - "Document architectural constraints and requirements"
    
    integration_analysis:
      - "Analyze MCP integration architectural patterns"
      - "Extract plugin architecture specifications"
      - "Identify extension and composition patterns"
      - "Map performance and security requirements"
  
  # Step 2: Design Analysis
  design_analysis:
    component_extraction:
      - "Extract all design components and interfaces"
      - "Identify design patterns and implementations"
      - "Map design operations and data structures"
      - "Document design constraints and validations"
    
    pattern_analysis:
      - "Analyze functional programming patterns in design"
      - "Extract immutability and purity patterns"
      - "Identify composition and extension patterns"
      - "Map error handling and validation patterns"
  
  # Step 3: Consistency Mapping
  consistency_mapping:
    architecture_to_design:
      - "Map each architectural component to design component"
      - "Verify design implements architectural patterns"
      - "Check design interfaces match architectural contracts"
      - "Validate design constraints align with architecture"
    
    design_to_architecture:
      - "Map each design component to architectural justification"
      - "Verify no design components lack architectural basis"
      - "Check design complexity matches architectural complexity"
      - "Validate design patterns follow architectural guidance"
  
  # Step 4: Language Agnostic Verification
  language_agnostic_verification:
    architecture_purity:
      - "Verify architecture uses only mathematical notation"
      - "Check architecture avoids language-specific syntax"
      - "Validate architecture uses universal patterns"
      - "Ensure architecture maintains abstraction level"
    
    design_purity:
      - "Verify design uses only mathematical notation"
      - "Check design avoids implementation syntax"
      - "Validate design maintains language-agnostic approach"
      - "Ensure design uses universal contract specifications"
  
  # Step 5: Interface Consistency Verification
  interface_consistency:
    operation_signatures:
      - "Compare operation signatures between layers"
      - "Verify parameter types match across layers"
      - "Check return types align between layers"
      - "Validate error handling patterns consistent"
    
    data_structure_alignment:
      - "Compare data structure definitions"
      - "Verify field types and constraints match"
      - "Check immutability patterns consistent"
      - "Validate composition patterns align"

# ============================================================================
# VERIFICATION CRITERIA
# ============================================================================

verification_criteria:
  
  # Critical Success Factors
  critical_success:
    - "100% of architectural components have design specifications"
    - "All design components have architectural justification"
    - "Interface signatures match exactly between layers"
    - "Language-agnostic approach maintained in both layers"
    - "Pattern consistency maintained across all components"
  
  # Quality Gates
  quality_gates:
    completeness:
      - "All architectural patterns implemented in design"
      - "All design components architecturally justified"
      - "All interfaces completely specified in both layers"
    
    consistency:
      - "Operation signatures identical across layers"
      - "Data structure definitions aligned"
      - "Error handling patterns consistent"
      - "Extension mechanisms aligned"
    
    purity:
      - "No language-specific syntax in either layer"
      - "Mathematical notation used consistently"
      - "Abstraction levels appropriate for each layer"
      - "Universal patterns maintained throughout"

# ============================================================================
# SPECIFIC VERIFICATION CHECKS
# ============================================================================

specific_checks:
  
  # Plugin System Verification
  plugin_system:
    architecture_requirements:
      - "Plugin registry with discovery capabilities"
      - "Plugin composition and chaining"
      - "Plugin adapter pattern for extensibility"
      - "Plugin lifecycle management"
    
    design_implementation:
      - "PluginRegistry: register(plugin: Plugin) → PluginRegistry"
      - "PluginRegistry: discover(criteria: DiscoveryCriteria) → Plugin[]"
      - "PluginRegistry: compose(plugins: Plugin[]) → CompositePlugin"
      - "Plugin: lifecycle methods (initialize, execute, cleanup)"
    
    verification_points:
      - "Registry operations match architectural specifications"
      - "Discovery mechanism supports architectural requirements"
      - "Composition pattern follows architectural guidance"
      - "Lifecycle management complete and consistent"
  
  # Context System Verification
  context_system:
    architecture_requirements:
      - "Context assembly with plugin enhancement"
      - "Immutable context data structures"
      - "Context transformation operations"
      - "Context adapter extensibility"
    
    design_implementation:
      - "assemble(query: Query, session: Session) → Context"
      - "enhance(adapters: ContextAdapter[], context: Context) → Context"
      - "Context: immutable data structure"
      - "ContextAdapter: enhancement interface"
    
    verification_points:
      - "Assembly operation matches architectural pattern"
      - "Enhancement mechanism supports architectural extensibility"
      - "Immutability preserved in design specification"
      - "Adapter pattern correctly implemented"
  
  # Tool System Verification
  tool_system:
    architecture_requirements:
      - "Tool registry with adapter enhancement"
      - "Tool execution with security and performance layers"
      - "Tool composition capabilities"
      - "Tool extension mechanisms"
    
    design_implementation:
      - "ToolRegistry: register(tool: Tool) → ToolRegistry"
      - "execute(tool: Tool, parameters: ToolParameters) → ToolResult"
      - "SecurityToolAdapter and PerformanceToolAdapter"
      - "Tool composition operations"
    
    verification_points:
      - "Registry operations support architectural requirements"
      - "Execution pattern includes security and performance layers"
      - "Adapter pattern correctly implemented for tools"
      - "Composition capabilities match architectural specifications"

# ============================================================================
# VERIFICATION OUTPUTS
# ============================================================================

expected_outputs:
  
  # Consistency Report
  consistency_report:
    format: "markdown"
    sections:
      - "Executive Summary"
      - "Architecture-to-Design Mapping Analysis"
      - "Interface Consistency Verification"
      - "Language Agnostic Compliance"
      - "Pattern Consistency Assessment"
      - "Gap Analysis and Recommendations"
  
  # Verification Matrix
  verification_matrix_output:
    format: "table"
    content:
      - "Architecture Component | Design Component | Status | Notes"
      - "Interface consistency verification results"
      - "Pattern alignment assessment"
      - "Language agnostic compliance check"
  
  # Action Items
  action_items:
    format: "checklist"
    categories:
      - "Critical inconsistencies requiring immediate attention"
      - "Design improvements for better architectural alignment"
      - "Interface specification updates needed"
      - "Pattern consistency improvements"

# ============================================================================
# VERIFICATION AUTOMATION
# ============================================================================

automation_support:
  
  # Automated Checks
  automated_checks:
    - "Interface signature comparison"
    - "Language-specific syntax detection"
    - "Cross-reference validation"
    - "Pattern consistency checking"
  
  # Manual Verification Points
  manual_verification:
    - "Architectural pattern implementation assessment"
    - "Design abstraction level evaluation"
    - "Extension mechanism adequacy review"
    - "Integration pattern coherence analysis"
  
  # Continuous Verification
  continuous_verification:
    - "Pre-commit architecture-design consistency checks"
    - "Documentation update impact analysis"
    - "Interface change compatibility verification"
    - "Pattern evolution validation"

# ============================================================================
# SUCCESS METRICS
# ============================================================================

success_metrics:
  quantitative:
    - "Consistency score: >98% architecture-design mapping"
    - "Interface alignment: 100% signature consistency"
    - "Language purity: 0 language-specific syntax violations"
    - "Pattern consistency: >95% pattern alignment score"
  
  qualitative:
    - "Design elegance and architectural coherence"
    - "Interface clarity and completeness"
    - "Pattern implementation quality"
    - "Overall documentation consistency and maintainability"

# ============================================================================
# VERIFICATION SCHEDULE
# ============================================================================

verification_schedule:
  frequency: "bi-weekly"
  triggers:
    - "Any architecture document modification"
    - "Any design document modification"
    - "Interface specification changes"
    - "Pattern implementation updates"
  
  deliverables:
    - "Bi-weekly consistency report"
    - "Monthly comprehensive verification"
    - "Interface change impact assessment"
    - "Quarterly architectural alignment review" 